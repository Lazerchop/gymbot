import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# Ваш токен
TOKEN = "8114369925:AAE9fqrFxWr4GsXzS_C0Gqo6voQ2VxaYlQg"

# Шлях до файлу для збереження розкладу
SCHEDULES_FILE = "schedules.json"

# Налаштування журналу
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Функція для завантаження розкладів з файлу
def load_schedules():
    try:
        with open(SCHEDULES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# Функція для збереження розкладів у файл
def save_schedules(schedules):
    with open(SCHEDULES_FILE, "w", encoding="utf-8") as f:
        json.dump(schedules, f, ensure_ascii=False, indent=4)

# Ініціалізація сховища для збереження розкладів
schedules = load_schedules()

# Команда /start для запуску бота
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_html(
        f"Привіт, <b>{user.first_name}</b>! Я допоможу тобі скласти розклад для спортзалу. "
        f"Введи <i>/schedule</i>, щоб побачити розклад або <i>/add</i> для додавання вільних годин."
    )

# Команда /schedule для перегляду розкладу
async def schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    schedule_text = "<b>Розклад на тиждень:</b>\n"
    if user_id in schedules:
        for day, times in schedules[user_id].items():
            schedule_text += f"<b>{day}:</b> {', '.join(times) if times else 'вільних годин немає'}\n"
    else:
        schedule_text += "Ви ще не додали вільний час.\n"
    await update.message.reply_html(schedule_text)

# Команда /add для додавання вільних годин
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Понеділок", callback_data="Понеділок"),
         InlineKeyboardButton("Вівторок", callback_data="Вівторок")],
        [InlineKeyboardButton("Середа", callback_data="Середа"),
         InlineKeyboardButton("Четвер", callback_data="Четвер")],
        [InlineKeyboardButton("П'ятниця", callback_data="П'ятниця"),
         InlineKeyboardButton("Субота", callback_data="Субота")],
        [InlineKeyboardButton("Неділя", callback_data="Неділя")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "Виберіть день тижня для додавання вільних годин:",
        reply_markup=reply_markup
    )

# Обробка вибору дня
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    day = query.data
    context.user_data["selected_day"] = day
    await query.edit_message_text(
        text=f"Ви вибрали <b>{day}</b>. Введіть період (наприклад, 12:00-14:00):"
    )

# Збереження періоду
async def save_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    time_period = update.message.text
    day = context.user_data.get("selected_day")

    # Перевірка, чи день вибраний
    if not day:
        await update.message.reply_text("Спершу оберіть день за допомогою команди /add.")
        return

    # Якщо користувач ще не має розкладу, ініціалізуємо його
    if user_id not in schedules:
        schedules[user_id] = {}
    if day not in schedules[user_id]:
        schedules[user_id][day] = []

    # Додаємо період в розклад
    schedules[user_id][day].append(time_period)

    # Зберігаємо оновлений розклад у файл
    save_schedules(schedules)

    await update.message.reply_html(
        f"✅ <b>Додано вільний час для {day}:</b> {time_period}\n"
        f"Ваш оновлений розклад: <i>/schedule</i>"
    )

# Основна функція для запуску бота
def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("schedule", schedule))
    application.add_handler(CommandHandler("add", add))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_time))

    application.run_polling()

if __name__ == "__main__":
    main()
